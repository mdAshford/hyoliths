#NEXUS
[R-package APE, Thu Jun 07 09:16:00 2018]

BEGIN TAXA;
	DIMENSIONS NTAX = 48;
	TAXLABELS
		Namacalathus
		Cotyledion_tylodes
		Loxosomella
		Flustra
		Amathia
		Pelagodiscus_atlanticus
		Terebratulina
		Novocrania
		Lingula
		Phoronis
		Sipunculus
		Serpula
		Tonicella
		Dentalium
		Wiwaxia_corrugata
		Halkieria_evangelista
		Dailyatia
		Acanthotretella_spinosa
		Alisina
		Askepasma_toddense
		Antigonambonites_planus
		Botsfordia
		Clupeafumosus_socialis
		Coolinia_pecten
		Craniops
		Eccentrotheca
		Eoobolus
		Glyptoria
		Gasconsia
		Haplophrentis_carinatus
		Heliomedusa_orienta
		Kutorgina_chengjiangensis
		Lingulosacculus
		Lingulellotreta_malongensis
		Longtancunella_chengjiangensis
		Micrina
		Micromitra
		Mickwitzia_muralensis
		Mummpikia_nuda
		Nisusia_sulcata
		Orthis
		Paterimitra
		Pedunculotheca_diania
		Salanygolina
		Siphonobolus_priscus
		Ussunia
		Tomteluva_perturbata
		Yuganotheca_elegans
	;
END;
BEGIN TREES;
	TRANSLATE
		1	Namacalathus,
		2	Cotyledion_tylodes,
		3	Loxosomella,
		4	Flustra,
		5	Amathia,
		6	Pelagodiscus_atlanticus,
		7	Terebratulina,
		8	Novocrania,
		9	Lingula,
		10	Phoronis,
		11	Sipunculus,
		12	Serpula,
		13	Tonicella,
		14	Dentalium,
		15	Wiwaxia_corrugata,
		16	Halkieria_evangelista,
		17	Dailyatia,
		18	Acanthotretella_spinosa,
		19	Alisina,
		20	Askepasma_toddense,
		21	Antigonambonites_planus,
		22	Botsfordia,
		23	Clupeafumosus_socialis,
		24	Coolinia_pecten,
		25	Craniops,
		26	Eccentrotheca,
		27	Eoobolus,
		28	Glyptoria,
		29	Gasconsia,
		30	Haplophrentis_carinatus,
		31	Heliomedusa_orienta,
		32	Kutorgina_chengjiangensis,
		33	Lingulosacculus,
		34	Lingulellotreta_malongensis,
		35	Longtancunella_chengjiangensis,
		36	Micrina,
		37	Micromitra,
		38	Mickwitzia_muralensis,
		39	Mummpikia_nuda,
		40	Nisusia_sulcata,
		41	Orthis,
		42	Paterimitra,
		43	Pedunculotheca_diania,
		44	Salanygolina,
		45	Siphonobolus_priscus,
		46	Ussunia,
		47	Tomteluva_perturbata,
		48	Yuganotheca_elegans
	;
	TREE * UNTITLED = [&R] (4,(5,((26,(((11,12),(15,(14,13))),(2,3))),((10,1),((17,16),(31,((42,((38,36),(((29,(46,(25,8))),((6,((34,9),(33,(23,(45,18))))),(27,(39,22)))),((37,20),(((24,21),(32,(40,(28,(35,(19,(7,41))))))),(44,(48,47))))))),(43,30))))))));
	TREE * UNTITLED = [&R] (4,(5,((26,(((15,(14,13)),(12,11)),(2,3))),(((17,16),(31,((30,43),(42,((38,36),(((29,(46,(25,8))),((6,((34,9),(23,(33,(45,18))))),(27,(39,22)))),((37,20),((44,(48,47)),((24,21),(32,(40,(28,(35,(19,(41,7))))))))))))))),(10,1)))));
	TREE * UNTITLED = [&R] (4,(5,(26,((((15,(14,13)),(11,12)),(2,3)),((10,1),((17,16),(31,((42,((38,36),(((37,20),(((24,21),(32,(40,(28,(35,(19,(7,41))))))),(44,(48,47)))),((29,(46,(25,8))),((6,((34,9),(23,(33,(18,45))))),(27,(39,22))))))),(43,30)))))))));
	TREE * UNTITLED = [&R] (4,(5,((26,((3,2),((12,11),(15,(13,14))))),((1,10),((16,17),(31,((42,((36,38),(((37,20),((44,(47,48)),((21,24),(32,(40,(28,(35,(19,(41,7))))))))),((29,(46,(8,25))),((6,((9,34),(23,(33,(18,45))))),(27,(22,39))))))),(30,43))))))));
	TREE * UNTITLED = [&R] (4,(5,((26,(((12,11),(15,(13,14))),(3,2))),((1,10),((16,17),(31,((42,((36,38),(((29,(46,(8,25))),((6,((23,(33,(18,45))),(34,9))),(27,(22,39)))),((20,37),(((21,24),(32,(40,(28,(35,(19,(41,7))))))),(44,(47,48))))))),(30,43))))))));
	TREE * UNTITLED = [&R] (4,(5,(26,((((11,12),(15,(14,13))),(2,3)),((10,1),((16,17),(31,((42,((36,38),(((37,20),(((24,21),(32,(40,(28,(35,(19,(41,7))))))),(44,(48,47)))),((29,(46,(25,8))),((6,((34,9),((23,33),(45,18)))),(27,(39,22))))))),(43,30)))))))));
	TREE * UNTITLED = [&R] (4,(5,((26,(((12,11),(15,(13,14))),(3,2))),((1,10),((16,17),(31,((42,((36,38),(((29,(46,(8,25))),((6,((9,34),((33,23),(18,45)))),(27,(22,39)))),((37,20),(((32,(40,(28,(35,(19,(41,7)))))),(21,24)),(44,(47,48))))))),(30,43))))))));
	TREE * UNTITLED = [&R] (4,(5,((26,(((15,(13,14)),(12,11)),(3,2))),((1,10),((16,17),(31,((42,((36,38),(((29,(46,(8,25))),((6,((34,9),((33,23),(45,18)))),(27,(22,39)))),(((44,(47,48)),((21,24),(32,(40,(28,(35,(19,(41,7)))))))),(20,37))))),(30,43))))))));
	TREE * UNTITLED = [&R] (4,(5,(26,((((12,11),(15,(13,14))),(3,2)),(((16,17),(31,((42,((36,38),(((29,(46,(8,25))),((6,((9,34),(23,(33,(18,45))))),(27,(22,39)))),((((21,24),(32,(40,(28,(35,(19,(41,7))))))),(44,(47,48))),(20,37))))),(30,43)))),(1,10))))));
	TREE * UNTITLED = [&R] (4,(5,((26,((3,2),((12,11),(15,(14,13))))),((10,1),((17,16),(31,((42,((38,36),(((29,(46,(25,8))),((6,((34,9),((33,23),(45,18)))),(27,(39,22)))),((20,37),(((32,(40,(28,(35,(19,(7,41)))))),(24,21)),(44,(48,47))))))),(43,30))))))));
	TREE * UNTITLED = [&R] (4,(5,(26,((((15,(13,14)),(11,12)),(3,2)),((1,10),((16,17),(31,((42,(((((6,((9,34),(33,(23,(18,45))))),(27,(22,39))),(29,(46,(8,25)))),((((21,24),(32,(40,(28,(35,(19,(41,7))))))),(44,(47,48))),(37,20))),(36,38))),(30,43)))))))));
	TREE * UNTITLED = [&R] (4,(5,(26,((((15,(14,13)),(11,12)),(2,3)),(((17,16),(31,((42,((36,38),(((29,(46,(25,8))),((6,((34,9),(23,(33,(45,18))))),(27,(39,22)))),((37,20),(((24,21),(32,(40,(28,(35,(19,(7,41))))))),(44,(48,47))))))),(43,30)))),(10,1))))));
	TREE * UNTITLED = [&R] (4,(5,((26,(((11,12),(15,(14,13))),(2,3))),((10,1),((17,16),(31,((42,((38,36),(((37,20),(((24,21),(32,(40,(28,(35,(19,(7,41))))))),(44,(48,47)))),((29,(46,(25,8))),((6,((34,9),((23,33),(45,18)))),(27,(39,22))))))),(43,30))))))));
	TREE * UNTITLED = [&R] (4,(5,((26,(((12,11),(15,(13,14))),(3,2))),((1,10),((16,17),(31,((42,((38,36),(((29,(46,(8,25))),((6,((9,34),(23,(33,(18,45))))),(27,(22,39)))),((20,37),((44,(47,48)),((21,24),(32,(40,(28,(35,(19,(41,7)))))))))))),(30,43))))))));
	TREE * UNTITLED = [&R] (4,(5,(26,((((16,17),(31,((42,((36,38),(((29,(46,(8,25))),((6,(((33,23),(18,45)),(9,34))),(27,(22,39)))),((37,20),(((21,24),(32,(40,(28,(35,(19,(41,7))))))),(44,(47,48))))))),(30,43)))),(1,10)),(((12,11),(15,(13,14))),(3,2))))));
	TREE * UNTITLED = [&R] (4,(5,(26,((((12,11),(15,(13,14))),(3,2)),(((16,17),(31,((42,((38,36),(((37,20),((44,(47,48)),((32,(40,(28,(35,(19,(41,7)))))),(21,24)))),((29,(46,(8,25))),((6,((9,34),((33,23),(18,45)))),(27,(22,39))))))),(30,43)))),(10,1))))));
	TREE * UNTITLED = [&R] (4,(5,(26,((((15,(13,14)),(12,11)),(3,2)),((1,10),((16,17),(31,((42,((36,38),(((37,20),(((21,24),(32,(40,(28,(35,(19,(41,7))))))),(44,(47,48)))),((29,(46,(8,25))),((6,((9,34),(23,(33,(45,18))))),(27,(22,39))))))),(30,43)))))))));
	TREE * UNTITLED = [&R] (4,(5,((26,(((15,(14,13)),(11,12)),(2,3))),((10,1),((16,17),(31,((43,30),(42,((38,36),(((29,(46,(25,8))),((6,((34,9),(33,(23,(45,18))))),(27,(39,22)))),((37,20),(((24,21),(32,(40,(28,(35,(19,(7,41))))))),(44,(48,47))))))))))))));
	TREE * UNTITLED = [&R] (4,(5,(26,(((3,2),((12,11),(15,(13,14)))),((1,10),((16,17),(31,((42,((38,36),(((37,20),(((32,(40,(28,(35,(19,(41,7)))))),(21,24)),(44,(47,48)))),((29,(46,(8,25))),((6,((23,(33,(18,45))),(9,34))),(27,(22,39))))))),(30,43)))))))));
	TREE * UNTITLED = [&R] (4,(5,((26,(((11,12),(15,(14,13))),(3,2))),((10,1),((17,16),(31,((42,((38,36),(((29,(46,(25,8))),((6,((33,(23,(45,18))),(9,34))),(27,(39,22)))),((37,20),(((24,21),(32,(40,(28,(35,(19,(7,41))))))),(44,(48,47))))))),(43,30))))))));
	TREE * UNTITLED = [&R] (4,(5,(26,((((11,12),(15,(14,13))),(2,3)),((10,1),((17,16),(31,((42,((38,36),(((((32,(40,(28,(35,(19,(7,41)))))),(24,21)),(44,(48,47))),(37,20)),((29,(46,(25,8))),((27,(39,22)),(6,((34,9),((33,23),(45,18))))))))),(43,30)))))))));
	TREE * UNTITLED = [&R] (4,(5,(26,((((11,12),(15,(14,13))),(2,3)),((10,1),((17,16),(31,((42,((((29,(46,(25,8))),((6,((34,9),((33,23),(45,18)))),(27,(39,22)))),((37,20),(((24,21),(32,(40,(28,(35,(19,(7,41))))))),(44,(48,47))))),(38,36))),(43,30)))))))));
	TREE * UNTITLED = [&R] (4,(5,(26,((((17,16),(31,((42,((38,36),(((37,20),((44,(48,47)),((32,(40,(28,(35,(19,(41,7)))))),(24,21)))),((29,(46,(25,8))),((6,((9,34),(33,(23,(18,45))))),(27,(39,22))))))),(43,30)))),(10,1)),(((12,11),(15,(14,13))),(2,3))))));
	TREE * UNTITLED = [&R] (4,(5,((26,(((12,11),(15,(13,14))),(3,2))),((1,10),((16,17),(31,((43,30),(42,((36,38),(((37,20),((44,(47,48)),((32,(40,(28,(35,(19,(41,7)))))),(21,24)))),((29,(46,(8,25))),((6,((9,34),(33,(23,(18,45))))),(27,(22,39))))))))))))));
END;
